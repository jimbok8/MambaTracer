/*
  Path Tracer Algorithm
*/


initBuffers(accum[], frameBuffer[]);

while(true)
{
  generateCameraRay(rays[], cameraStruct, rayCount);      
  hitCount = 0;
  
  for(int i = 0; i<5; i++)  
  {
    if(rayCount>0)
    {
        /*
          "Ray-scene intersection is where all resources are used in gpu, hence should be most optimized. 
           This is done through compaction of rays."
        */
        tracekernel(rays[], intersection[], primitives[], bvh, hitCount, rayCount);    

        //if there is an environmental map
        shadeBackground(intersection[], rays[], occlusions[]);

        if(hitCount>0)
        {            
            /*
              "in case you hit light directly, since light doesn't reflect" 
            */
            lightHit(intersection[], material[], accum[]); 

            /*
              "sample brdf"
              "in case there are multiple brdfs and we need one
            */
            sampleBRDF(intersection[], material[]);

            /*
              "sample direct light and perform a simple occlusion test of sampled light"
            */    
            directLightSample(intersection[], directLightRays[]);

            /*
              "this methods are trivial hence can fit in one kernel"       
               sample_next_ray()
               calculate_brdf_factor()
               calculate_brdf_pdf()
               compact_ray()
            */    
            randomWalk(intersection[], rays[], material[], accum[]);  
         }
     }
  }
  updateFrame(accum[], frameBuffer[], frameCount);
}
   
